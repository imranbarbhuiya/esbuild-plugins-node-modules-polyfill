// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Fallback Test (Unpolyfilled) > GIVEN a file that imports a node builtin that isn't polyfilled THEN provide an empty fallback 1`] = `
"\\"use strict\\";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === \\"object\\" || typeof from === \\"function\\") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. \\"__esModule\\" has not been set), then set
    // \\"default\\" to the CommonJS \\"module.exports\\" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \\"default\\", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node-modules-polyfills-empty:node:trace_events
  var require_node_trace_events = __commonJS({
    \\"node-modules-polyfills-empty:node:trace_events\\"(exports, module) {
      module.exports = {};
    }
  });

  // tests/fixtures/input/fallbackUnpolyfilled.ts
  var traceEvents = __toESM(require_node_trace_events());
  console.log(typeof traceEvents);
})();
"
`;

exports[`Fallback Test (Unpolyfilled) > GIVEN a file that imports a node builtin when empty fallbacks aren't enabled THEN don't provide an empty fallback 1`] = `
"\\"use strict\\";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x) => typeof require !== \\"undefined\\" ? require : typeof Proxy !== \\"undefined\\" ? new Proxy(x, {
    get: (a, b) => (typeof require !== \\"undefined\\" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== \\"undefined\\")
      return require.apply(this, arguments);
    throw Error('Dynamic require of \\"' + x + '\\" is not supported');
  });
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === \\"object\\" || typeof from === \\"function\\") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. \\"__esModule\\" has not been set), then set
    // \\"default\\" to the CommonJS \\"module.exports\\" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \\"default\\", { value: mod, enumerable: true }) : target,
    mod
  ));

  // tests/fixtures/input/fallbackUnpolyfilled.ts
  var traceEvents = __toESM(__require(\\"node:trace_events\\"));
  console.log(typeof traceEvents);
})();
"
`;
